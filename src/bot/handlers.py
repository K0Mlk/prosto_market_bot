import os
from aiogram import types, Dispatcher
from aiogram.filters import Command
from aiogram.types import CallbackQuery, FSInputFile
from src.bot.keyboards import Keyboards
from src.config import Config
from src.database.models import UserModel
import asyncio

class MessageHandlers:
    WELCOME_TEXT = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞ ¬´–ü—Ä–æ—Å—Ç–æ –ú–∞—Ä–∫–µ—Ç¬ª.\n"
        "–ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è? üòä"
    )
    
    CAPTIONS = {
        "barcode": "–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ —Å–∫–∞–Ω–∏—Ä—É–µ—Ç—Å—è —à—Ç—Ä–∏—Ö-–∫–æ–¥ –∏–ª–∏ —ç–∫—Ä–∞–Ω –º–æ–Ω–∏—Ç–æ—Ä–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ–ª—ã–π, —Ç–æ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:",
        "screen": "–ï—Å–ª–∏ —É –≤–∞—Å —á–µ—Ä–Ω—ã–π —ç–∫—Ä–∞–Ω, —Ç–æ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:",
        "bank": "–í–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ–º —Å–≤—è–∑–∏ —Å –±–∞–Ω–∫–æ–º:",
        "not_found": ""  
    }
    
    def __init__(self, dp: Dispatcher):
        self.dp = dp
        self.user_model = UserModel()
        self.register_handlers()
        
        self.handlers_map = {
            "technical": self.handle_technical,
            "barcode": self.handle_technical_subcategory,
            "screen": self.handle_technical_subcategory,
            "bank": self.handle_technical_subcategory,
            "not_found": self.handle_technical_subcategory,
            "back_to_menu": self.handle_back_to_menu
        }

    async def start_command(self, message: types.Message):
        self.user_model.create_user_if_not_exists(
            user_id=message.from_user.id,
            username=message.from_user.username,
            full_name=message.from_user.full_name
        )
        await message.answer(self.WELCOME_TEXT, reply_markup=Keyboards.main_menu())

    async def handle_callback(self, callback: CallbackQuery):
        data = callback.data
        handler = self.handlers_map.get(data)
        
        if handler:
            await handler(callback)
        else:
            await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
        
        await callback.answer()

    async def handle_technical(self, callback: CallbackQuery):
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é",
            reply_markup=Keyboards.technical_submenu()
        )

    async def handle_technical_subcategory(self, callback: CallbackQuery):
        file_key = callback.data
        pdf_path = Config.PDF_MAP.get(file_key)
        
        await callback.message.delete()
        
        wait_message = await callback.message.answer("–û–∂–∏–¥–∞–π—Ç–µ...üòä")
        
        try:
            if file_key == "not_found":
                
                message_text = (
                    "–ï—Å–ª–∏ –≤—ã –Ω–µ –Ω–∞—à–ª–∏ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É, –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –ø–æ –Ω–æ–º–µ—Ä—É:\n"
                    "üìû +7 (927) 043-54-99"
                )
                
                await callback.message.answer(
                    message_text,
                    reply_markup=Keyboards.back_to_menu()
                )
            else:
                if not pdf_path:
                    raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {pdf_path}")
                
                document = FSInputFile(pdf_path, filename=os.path.basename(pdf_path))
                
                caption = self.CAPTIONS.get(file_key, "–í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:")
                
                await callback.bot.send_document(
                    chat_id=callback.message.chat.id,
                    document=document,
                    caption=caption,
                    reply_markup=Keyboards.back_to_menu()
                )
            
            self.user_model.log_request(
                user_id=callback.from_user.id,
                category='–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏',
                subcategory=file_key
            )
            
        except Exception as e:
            await callback.message.answer(
                f"–û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=Keyboards.back_to_menu()
            )
        
        if wait_message:
            await wait_message.delete()

    async def handle_back_to_menu(self, callback: CallbackQuery):
        
        await callback.message.delete()
        
        await callback.message.answer(
            self.WELCOME_TEXT,
            reply_markup=Keyboards.main_menu()
        )

    def register_handlers(self):
        self.dp.message.register(self.start_command, Command("start"))
        self.dp.callback_query.register(self.handle_callback)